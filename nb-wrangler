#! /bin/bash

# set -x

setup_env() {
    export NBW_PYTHON_VERSION=${NBW_PYTHON_VERSION:-"3.11"}
    export NBW_ROOT=${NBW_ROOT:-"$HOME/.nbw-live"}
    export NBW_PANTRY=${NBW_PANTRY:-"${NBW_ROOT}/pantry"}
    export NBW_MM=${NBW_MM:-"${NBW_ROOT}/mm"}
    export MAMBA_ROOT_PREFIX=${NBW_MM}
    export NBW_MAMBA_CMD=${NBW_MAMBA_CMD:-"${NBW_MM}/bin/micromamba"}
    export NBW_MAMBA="$(basename $NBW_MAMBA_CMD)"
    export NBW_PIP_CMD=${NBW_PIP_CMD:-"uv pip"}
    export NBW_CACHE="${NBW_ROOT}/cache"
    export UV_CACHE_DIR="${NBW_CACHE}/uv"
    export PIP_CACHE_DIR="${NBW_CACHE}/pip"
    export NBW_URL="https://github.com/spacetelescope/nb-wrangler"
    export PATH="${NBW_MM}/bin:${PATH}"

    # Detect current shell for micromamba hook
    if [ -n "$ZSH_VERSION" ]; then
        NBW_SHELL="zsh"
    elif [ -n "$BASH_VERSION" ]; then
        NBW_SHELL="bash"
    elif [ -n "$FISH_VERSION" ]; then
        NBW_SHELL="fish"
    else
        # Fallback to detecting from $SHELL or $0
        case "${SHELL##*/}" in
            zsh) NBW_SHELL="zsh";;
            fish) NBW_SHELL="fish";;
            *) NBW_SHELL="bash";;
        esac
    fi
    export NBW_SHELL
}

bootstrap() {
    rm -rf "${NBW_MM}"
    install_micromamba
    install_nbwrangler
}

install_micromamba() {
    echo "Installing micromamba..."

    local OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    local ARCH=$(uname -m | tr '[:upper:]' '[:lower:]')

    case "${OS}-${ARCH}" in
        linux-x86_64)
            URL=https://micro.mamba.pm/api/micromamba/linux-64/latest
            ;;
        linux-arm|linux-arm64|linux-aarch64)
            URL=https://micro.mamba.pm/api/micromamba/linux-aarch64/latest
            ;;
        darwin-x86_64)
            URL=https://micro.mamba.pm/api/micromamba/osx-64/latest
            ;;
        darwin-arm64)
            URL=https://micro.mamba.pm/api/micromamba/osx-arm64/latest
            ;;
        *)
            echo "Unsupported OS or architecture: ${OS}-${ARCH}"
            ;;
    esac

    # Download and extract micromamba binary
    if ! mkdir -p "${NBW_MM}"; then
        echo "Failed to create directory: ${NBW_MM}"
        return 1
    fi
    cd "$NBW_MM"

    if ! curl --silent --location "$URL" | tar xvj bin/micromamba; then
        echo "Failed to download and extract micromamba"
        return 1
    fi

    # Verify shell hook support for micromamba
    if ! "${NBW_MAMBA}" shell hook --shell "${NBW_SHELL}" >/dev/null 2>&1; then
        echo "Warning: Shell '${NBW_SHELL}' may not be fully supported by micromamba"
        export NBW_SHELL="bash"  # fallback to bash if unsupported
    fi

    eval "$("${NBW_MAMBA}" shell hook --shell "${NBW_SHELL}")"

    "${NBW_MAMBA}" config append channels conda-forge
    "${NBW_MAMBA}" config set channel_priority strict
    "${NBW_MAMBA}" self-update

    # Generate initialization script for micromamba
    # "${NBW_MAMBA}" shell init -s "${NBW_SHELL}" # > "${NBW_ROOT}/micromamba-init.sh"
    "${NBW_MAMBA}" activate  # this activates the base environment
}

install_nbwrangler() {
    echo "Installing nb-wrangler..."
    if ! "${NBW_MAMBA}" create -n nbwrangler -c conda-forge; then
        echo "Failed to create conda environment: nbwrangler"
        return 1
    fi

    "${NBW_MAMBA}" activate nbwrangler

    # Just set up python and installer tools
    if ! "${NBW_MAMBA}" install --quiet --yes -c conda-forge python="${NBW_PYTHON_VERSION}" uv jq; then
        echo "Failed to install required packages: python, uv, jq"
        return 1
    fi

    uv pip install --quiet ruamel.yaml papermill ipykernel jupyter setuptools wheel yq boto3

    # Install nb-wrangler packager from github source including dependencies
    if [ ! -e .nb-wrangler-repo-id ]; then
        rm -rf nbw-temp
        mkdir nbw-temp
        ( cd nbw-temp && git clone "${NBW_URL}" && cd "nb-wrangler" && uv pip install --quiet . )
        rm -rf nbw-temp
    else
        uv pip install --quiet .[dev]
    fi

    echo '--------------------------------------------------------------------------------------------------------------------------'
    echo "OK nb-wrangler is installed. It's recommended to put the nb-wrangler wrapper script on your PATH."
    echo 'To use nb-wrangler: "source nb-wrangler activate". Then type "nb-wrangler [command]".'
    echo 'To stop using nb-wrangler: "source nb-wrangler deactivate".'
    echo '--------------------------------------------------------------------------------------------------------------------------'
}

# ===========================================================================================
if [ $# -eq 0 ]; then
    echo "usage: nb-wrangler 'bootstrap' or '--help' or  '<yaml-spec> switches...'"
    echo
    echo "To activate:  'source nb-wrangler environment'"
    exit 2
fi

setup_env

NBW_COMMAND=$1
shift;

case $NBW_COMMAND in
    boot*)
        bootstrap
        ;;
    *)
        ;;
esac

eval "$("${NBW_MAMBA}" shell hook --shell "${NBW_SHELL}")"

case $NBW_COMMAND in
    boot*)
        ;;
    env*)
        ;;
    act*)
        ${NBW_MAMBA} activate $*
        ;;
    deact*)
        ${NBW_MAMBA} deactivate
        ;;
    *)
        ${NBW_MAMBA} activate nbwrangler
        python -m nb_wrangler $NBW_COMMAND $*
        ;;
esac
